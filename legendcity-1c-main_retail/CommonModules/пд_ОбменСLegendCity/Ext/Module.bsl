
#Область РегламентныеЗадания

Процедура ВыгрузитьИзмененияПродажИБонусовРегламентноеЗадание() Экспорт
	
	ВыгрузитьИзмененияПродаж(Ложь);

	ВыгрузитьИзмененияБонусов(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс

Процедура ЗарегистрироватьИзмененияПродажи(Документ, БонуснаяКарта, СуммаДвижения) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	Если СуммаДвижения < 0 Тогда
		
		Если ТипЗнч(Документ) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
			
			Документ = Документ.ДокументОснование;
			БонуснаяКарта = Неопределено;
			
		ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ЧекККМ") Тогда
			
			Документ = Документ.ЧекККМПродажа;
			БонуснаяКарта = Неопределено;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЖурналВыгрузки = РегистрыСведений.пд_БонусныеНачисленияИПродажиКВыгрузке.СоздатьНаборЗаписей();
	ЖурналВыгрузки.Отбор.Документ.Установить(Документ); 
	ЖурналВыгрузки.Отбор.ВидВыгрузки.Установить(Перечисления.пд_ВидыВыгрузки.Продажа);  
	
	Если ЗначениеЗаполнено(БонуснаяКарта) Тогда
		ЖурналВыгрузки.Отбор.БонуснаяКарта.Установить(БонуснаяКарта);	
	КонецЕсли;
	
	ЖурналВыгрузки.Прочитать();
	
	Если ЖурналВыгрузки.Количество() > 0 Тогда
		
		Для Каждого Запись Из ЖурналВыгрузки Цикл
			
			Запись.Результат = Перечисления.пд_РезультатВыгрузки.КВыгрузке;
			
			Если Не ЗначениеЗаполнено(БонуснаяКарта) И Не Запись.БылоСоздание Тогда
				
				ЖурналВыгрузки.Удалить(Запись); 
				
			ИначеЕсли Не ЗначениеЗаполнено(БонуснаяКарта) И Запись.БылоСоздание Тогда
				
				Запись.ВидОперации = "УДАЛИТЬ";	

			КонецЕсли;
				
		КонецЦикла;
		
	ИначеЕсли СуммаДвижения < 0 Тогда
		Возврат;	
	Иначе
		
		Запись = ЖурналВыгрузки.Добавить();  
		Запись.ВидОперации = "СОЗДАТЬ";
		Запись.Документ = Документ;
		Запись.БонуснаяКарта = БонуснаяКарта;
		Запись.ВидВыгрузки = Перечисления.пд_ВидыВыгрузки.Продажа;
		Запись.Результат = Перечисления.пд_РезультатВыгрузки.КВыгрузке;
	
	КонецЕсли;
	
	ЖурналВыгрузки.Записать();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ЗарегистрироватьИзмененияБонусов(Документ, БонуснаяКарта, СуммаДвижения) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);

	Если СуммаДвижения < 0 Тогда
		
		Если ТипЗнч(Документ) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
			
			Документ = Документ.ДокументОснование;
			БонуснаяКарта = Неопределено;
			
		ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ЧекККМ") Тогда
			
			Документ = Документ.ЧекККМПродажа;
			БонуснаяКарта = Неопределено;
			
		КонецЕсли;
		
	КонецЕсли;
		
	ЖурналВыгрузки = РегистрыСведений.пд_БонусныеНачисленияИПродажиКВыгрузке.СоздатьНаборЗаписей();
	ЖурналВыгрузки.Отбор.Документ.Установить(Документ); 
	ЖурналВыгрузки.Отбор.ВидВыгрузки.Установить(Перечисления.пд_ВидыВыгрузки.Бонус);	
	
	Если ЗначениеЗаполнено(БонуснаяКарта) Тогда
		ЖурналВыгрузки.Отбор.БонуснаяКарта.Установить(БонуснаяКарта);	
	КонецЕсли;
	
	ЖурналВыгрузки.Прочитать();
	
	Если ЖурналВыгрузки.Количество() > 0 Тогда
		
		Для Каждого Запись Из ЖурналВыгрузки Цикл
				
			Запись.Результат = Перечисления.пд_РезультатВыгрузки.КВыгрузке;
			
			Если Не ЗначениеЗаполнено(БонуснаяКарта) И Не Запись.БылоСоздание Тогда
				
				ЖурналВыгрузки.Удалить(Запись); 
				
			ИначеЕсли Не ЗначениеЗаполнено(БонуснаяКарта) И Запись.БылоСоздание Тогда
				
				Запись.ВидОперации = "УДАЛИТЬ";	
					
			ИначеЕсли Не Запись.БылоСоздание Тогда 
				
				Запись.ВидОперации = "СОЗДАТЬ";	
				Запись.БонуснаяКарта = БонуснаяКарта;  
				Запись.ВидВыгрузки = Перечисления.пд_ВидыВыгрузки.Бонус;
							
			ИначеЕсли Запись.БылоСоздание Тогда
				
				Запись.ВидОперации = "ОБНОВИТЬ";	
				Запись.БонуснаяКарта = БонуснаяКарта;
				Запись.ВидВыгрузки = Перечисления.пд_ВидыВыгрузки.Бонус;
					
			КонецЕсли;	
					
		КонецЦикла;
		
	ИначеЕсли СуммаДвижения < 0 Тогда
		Возврат;	
	ИначеЕсли ЗначениеЗаполнено(БонуснаяКарта) Тогда
		
		Запись = ЖурналВыгрузки.Добавить();  
		Запись.ВидОперации = "СОЗДАТЬ";
		Запись.Документ = Документ;
		Запись.БонуснаяКарта = БонуснаяКарта;
		Запись.ВидВыгрузки = Перечисления.пд_ВидыВыгрузки.Бонус;
		Запись.Результат = Перечисления.пд_РезультатВыгрузки.КВыгрузке;
			
	КонецЕсли;
	
	ЖурналВыгрузки.Записать();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////

Процедура ВыгрузитьИзмененияПродаж(РучнойРежим = Истина)
	
   НастройкиИнтеграции = ПолучитьНастройкиИнтеграции();
	
	Если НастройкиИнтеграции = Неопределено Тогда
		
		ЗаписьЖурналаРегистрации("Выгрузка продаж",
			УровеньЖурналаРегистрации.Предупреждение,
			Метаданные.Подсистемы.пд_ИнтеграцияLegendCity.Имя,,
			"Не заполнены настройки интеграции.");
			
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	БонусныеНачисленияКВыгрузке.БонуснаяКарта КАК БонуснаяКарта,
	|	БонусныеНачисленияКВыгрузке.Документ КАК Документ,
	|	БонусныеНачисленияКВыгрузке.Идентификатор КАК Идентификатор,
	|	БонусныеНачисленияКВыгрузке.ВидОперации КАК ВидОперации
	|ИЗ
	|	РегистрСведений.пд_БонусныеНачисленияИПродажиКВыгрузке КАК БонусныеНачисленияКВыгрузке
	|ГДЕ
	|	(БонусныеНачисленияКВыгрузке.Результат = ЗНАЧЕНИЕ(Перечисление.пд_РезультатВыгрузки.КВыгрузке)
	|			ИЛИ БонусныеНачисленияКВыгрузке.Результат = ЗНАЧЕНИЕ(Перечисление.пд_РезультатВыгрузки.Ошибка))
	|	И БонусныеНачисленияКВыгрузке.ВидВыгрузки = ЗНАЧЕНИЕ(Перечисление.пд_ВидыВыгрузки.Продажа)";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
			
		Если Выборка.ВидОперации = "СОЗДАТЬ" Тогда
			
			ДанныеПоказателей = ПолучитьСуммуПродажиСкидкиПродажиПоБонуснойКарте(Выборка.Документ, Выборка.БонуснаяКарта);
		
			СтруктураЗапроса = Новый Структура;
			СтруктураЗапроса.Вставить("date", Формат(УниверсальноеВремя(Выборка.Документ.Дата, ЧасовойПояс()), "ДФ=гггг-ММ-ддTЧЧ:мм:ссZ"));
			СтруктураЗапроса.Вставить("cardCode", Число(Выборка.БонуснаяКарта.КодКарты));
			СтруктураЗапроса.Вставить("posId", НастройкиИнтеграции.ИдентификаторТерминала);
			СтруктураЗапроса.Вставить("purchaseId", ПолучитьИдентификатор());
			СтруктураЗапроса.Вставить("bonuses", ДанныеПоказателей.Бонус * 100);
			СтруктураЗапроса.Вставить("discount", ДанныеПоказателей.СуммаСкидки * 100); 
			СтруктураЗапроса.Вставить("paid", ДанныеПоказателей.СуммаПродажи * 100); 
			СтруктураЗапроса.Вставить("price", ДанныеПоказателей.СуммаПродажиБезСкидки * 100);
			
			ДанныеОтвета = ОтправитьПродажу(НастройкиИнтеграции, СтруктураЗапроса); 
			
			Если Не ДанныеОтвета = Неопределено Тогда
				
				ЖурналВыгрузки = РегистрыСведений.пд_БонусныеНачисленияИПродажиКВыгрузке.СоздатьНаборЗаписей();
				ЖурналВыгрузки.Отбор.Документ.Установить(Выборка.Документ);
				ЖурналВыгрузки.Отбор.БонуснаяКарта.Установить(Выборка.БонуснаяКарта);
				ЖурналВыгрузки.Отбор.ВидВыгрузки.Установить(Перечисления.пд_ВидыВыгрузки.Продажа);
				ЖурналВыгрузки.Прочитать();
				
				Если ДанныеОтвета.Ошибка Тогда
					ЖурналВыгрузки[0].Результат = Перечисления.пд_РезультатВыгрузки.Ошибка;
					ЖурналВыгрузки[0].ОписаниеОшибки = ДанныеОтвета.ОписаниеОшибки;
				Иначе                
					ЖурналВыгрузки[0].Результат = Перечисления.пд_РезультатВыгрузки.Успешно;
					ЖурналВыгрузки[0].Идентификатор = Формат(СтруктураЗапроса.purchaseId, "ЧГ=0");
	                ЖурналВыгрузки[0].БылоСоздание = Истина;
	                ЖурналВыгрузки[0].ВидОперации = ""; 
					ЖурналВыгрузки[0].ОписаниеОшибки = "";
				КонецЕсли;
								
				ЖурналВыгрузки.Записать();


			КонецЕсли;
						
		ИначеЕсли Выборка.ВидОперации = "УДАЛИТЬ" Тогда 
			
			СтруктураЗапроса = Новый Структура;
			СтруктураЗапроса.Вставить("pos", Формат(НастройкиИнтеграции.ИдентификаторТерминала, "ЧГ=0"));
			СтруктураЗапроса.Вставить("purchase", Выборка.Идентификатор);
			
			ДанныеОтвета = УдалитьПродажу(НастройкиИнтеграции, СтруктураЗапроса, Выборка.Идентификатор);
			
			Если Не ДанныеОтвета = Неопределено Тогда
				
				ЖурналВыгрузки = РегистрыСведений.пд_БонусныеНачисленияИПродажиКВыгрузке.СоздатьНаборЗаписей();
				ЖурналВыгрузки.Отбор.Документ.Установить(Выборка.Документ);
				ЖурналВыгрузки.Отбор.БонуснаяКарта.Установить(Выборка.БонуснаяКарта); 
				ЖурналВыгрузки.Отбор.ВидВыгрузки.Установить(Перечисления.пд_ВидыВыгрузки.Продажа);
				ЖурналВыгрузки.Прочитать();   
					
				Если ДанныеОтвета.Ошибка Тогда
					ЖурналВыгрузки[0].Результат = Перечисления.пд_РезультатВыгрузки.Ошибка;
					ЖурналВыгрузки[0].ОписаниеОшибки = ДанныеОтвета.ОписаниеОшибки;
				Иначе                
					ЖурналВыгрузки.Удалить(ЖурналВыгрузки[0]);
				КонецЕсли;
								
				ЖурналВыгрузки.Записать();
			
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЦикла;	

КонецПроцедуры

Процедура ВыгрузитьИзмененияБонусов(РучнойРежим = Истина)
	
	НастройкиИнтеграции = ПолучитьНастройкиИнтеграции();
	
	Если НастройкиИнтеграции = Неопределено Тогда
		
		ЗаписьЖурналаРегистрации("Выгрузка изменений бонусных баллов",
			УровеньЖурналаРегистрации.Предупреждение,
			Метаданные.Подсистемы.пд_ИнтеграцияLegendCity.Имя,,
			"Не заполнены настройки интеграции.");
			
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	БонусныеНачисленияКВыгрузке.Документ КАК Документ,
	|	БонусныеНачисленияКВыгрузке.БонуснаяКарта КАК БонуснаяКарта,
	|	БонусныеНачисленияКВыгрузке.Идентификатор КАК Идентификатор,
	|	БонусныеНачисленияКВыгрузке.ВидОперации КАК ВидОперации
	|ИЗ
	|	РегистрСведений.пд_БонусныеНачисленияИПродажиКВыгрузке КАК БонусныеНачисленияКВыгрузке
	|ГДЕ
	|	(БонусныеНачисленияКВыгрузке.Результат = ЗНАЧЕНИЕ(Перечисление.пд_РезультатВыгрузки.КВыгрузке)
	|			ИЛИ БонусныеНачисленияКВыгрузке.Результат = ЗНАЧЕНИЕ(Перечисление.пд_РезультатВыгрузки.Ошибка))
	|	И БонусныеНачисленияКВыгрузке.ВидВыгрузки = ЗНАЧЕНИЕ(Перечисление.пд_ВидыВыгрузки.Бонус)";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		transaction = Неопределено;
		
		ЗапросПродажи = Новый Запрос;
		ЗапросПродажи.Текст = 
		
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Продажи.Идентификатор КАК Идентификатор
		|ИЗ
		|	РегистрСведений.пд_БонусныеНачисленияИПродажиКВыгрузке КАК Продажи
		|ГДЕ
		|	Продажи.БонуснаяКарта = &БонуснаяКарта
		|	И Продажи.Документ = &Документ
		|	И Продажи.ВидВыгрузки = ЗНАЧЕНИЕ(Перечисление.пд_ВидыВыгрузки.Продажа)";
		
		ЗапросПродажи.УстановитьПараметр("Документ", Выборка.Документ);
		ЗапросПродажи.УстановитьПараметр("БонуснаяКарта", Выборка.БонуснаяКарта);
		
		ВыборкаПродажи = ЗапросПродажи.Выполнить().Выбрать();
		Если ВыборкаПродажи.Следующий() Тогда
				
			transaction = Новый Структура("posId, purchaseId", 
				НастройкиИнтеграции.ИдентификаторТерминала, 
				Число(ВыборкаПродажи.Идентификатор)
			);	
		КонецЕсли;
		
		Бонус = ПолучитьБонус(Выборка.Документ, Выборка.БонуснаяКарта, "Приход");
			
		Если Выборка.ВидОперации = "СОЗДАТЬ" Тогда
			
			СтруктураЗапроса = Новый Структура;
			СтруктураЗапроса.Вставить("date", Формат(УниверсальноеВремя(Выборка.Документ.Дата, ЧасовойПояс()), "ДФ=гггг-ММ-ддTЧЧ:мм:ссZ"));
			СтруктураЗапроса.Вставить("cardCode", Число(Выборка.БонуснаяКарта.КодКарты));
			СтруктураЗапроса.Вставить("amount", Бонус * 100);
			СтруктураЗапроса.Вставить("description", "Бонусы из 1С");
			
			Если Не transaction = Неопределено тогда
				СтруктураЗапроса.Вставить("transaction", transaction);	
			КонецЕсли;
			
			ДанныеОтвета = ОтправитьНачислениеБонусов(НастройкиИнтеграции, СтруктураЗапроса); 
			
			Если Не ДанныеОтвета = Неопределено Тогда
				
				ЖурналВыгрузки = РегистрыСведений.пд_БонусныеНачисленияИПродажиКВыгрузке.СоздатьНаборЗаписей();
				ЖурналВыгрузки.Отбор.Документ.Установить(Выборка.Документ);
				ЖурналВыгрузки.Отбор.БонуснаяКарта.Установить(Выборка.БонуснаяКарта);
				ЖурналВыгрузки.Отбор.ВидВыгрузки.Установить(Перечисления.пд_ВидыВыгрузки.Бонус);
				ЖурналВыгрузки.Прочитать();
				
				Если ДанныеОтвета.Ошибка Тогда
					ЖурналВыгрузки[0].Результат = Перечисления.пд_РезультатВыгрузки.Ошибка;
					ЖурналВыгрузки[0].ОписаниеОшибки = ДанныеОтвета.ОписаниеОшибки;
				Иначе                
					ЖурналВыгрузки[0].Результат = Перечисления.пд_РезультатВыгрузки.Успешно;
					ЖурналВыгрузки[0].Идентификатор = ДанныеОтвета.Данные.bonusGuid;
					ЖурналВыгрузки[0].БылоСоздание = Истина;
					ЖурналВыгрузки[0].ВидОперации = "";
					ЖурналВыгрузки[0].ОписаниеОшибки = "";
				КонецЕсли;
				
				ЖурналВыгрузки.Записать();
				
			КонецЕсли;
			
		ИначеЕсли Выборка.ВидОперации = "ОБНОВИТЬ" Тогда  
			
			СтруктураЗапроса = Новый Структура;
			СтруктураЗапроса.Вставить("bonusGuid", Выборка.Идентификатор);
			СтруктураЗапроса.Вставить("cardCode", Число(Выборка.БонуснаяКарта.КодКарты));
			СтруктураЗапроса.Вставить("amount", Бонус * 100);
			
			Если Не transaction = Неопределено тогда
				СтруктураЗапроса.Вставить("transaction", transaction);	
			КонецЕсли;
			
			ДанныеОтвета = ИзменитьНачислениеБонусов(НастройкиИнтеграции, СтруктураЗапроса, Выборка.Идентификатор);
			
			Если Не ДанныеОтвета = Неопределено Тогда
				
				ЖурналВыгрузки = РегистрыСведений.пд_БонусныеНачисленияИПродажиКВыгрузке.СоздатьНаборЗаписей();
				ЖурналВыгрузки.Отбор.Документ.Установить(Выборка.Документ);
				ЖурналВыгрузки.Отбор.БонуснаяКарта.Установить(Выборка.БонуснаяКарта);   
				ЖурналВыгрузки.Отбор.ВидВыгрузки.Установить(Перечисления.пд_ВидыВыгрузки.Бонус);
				ЖурналВыгрузки.Прочитать();
				
				Если ДанныеОтвета.Ошибка Тогда
					ЖурналВыгрузки[0].Результат = Перечисления.пд_РезультатВыгрузки.Ошибка;
					ЖурналВыгрузки[0].ОписаниеОшибки = ДанныеОтвета.ОписаниеОшибки;
				Иначе                
					ЖурналВыгрузки[0].Результат = Перечисления.пд_РезультатВыгрузки.Успешно;
					ЖурналВыгрузки[0].ВидОперации = "";
					ЖурналВыгрузки[0].ОписаниеОшибки = "";
				КонецЕсли;
				
				ЖурналВыгрузки.Записать();				
				
			КонецЕсли;
			
		ИначеЕсли Выборка.ВидОперации = "УДАЛИТЬ" Тогда 
			
			СтруктураЗапроса = Новый Структура;
			СтруктураЗапроса.Вставить("bonusGuid", Выборка.Идентификатор);
			
			ДанныеОтвета = ВыполнитьУдалениеБонусов(НастройкиИнтеграции, СтруктураЗапроса, Выборка.Идентификатор);
			
			Если Не ДанныеОтвета = Неопределено Тогда
				
				ЖурналВыгрузки = РегистрыСведений.пд_БонусныеНачисленияИПродажиКВыгрузке.СоздатьНаборЗаписей();
				ЖурналВыгрузки.Отбор.Документ.Установить(Выборка.Документ);
				ЖурналВыгрузки.Отбор.БонуснаяКарта.Установить(Выборка.БонуснаяКарта); 
				ЖурналВыгрузки.Отбор.ВидВыгрузки.Установить(Перечисления.пд_ВидыВыгрузки.Бонус);
				ЖурналВыгрузки.Прочитать();
			
				Если ДанныеОтвета.Ошибка Тогда
					ЖурналВыгрузки[0].Результат = Перечисления.пд_РезультатВыгрузки.Ошибка;
					ЖурналВыгрузки[0].ОписаниеОшибки = ДанныеОтвета.ОписаниеОшибки;
				Иначе                
					ЖурналВыгрузки.Удалить(ЖурналВыгрузки[0]);
				КонецЕсли;

				ЖурналВыгрузки.Записать();
			
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЦикла;	
	
КонецПроцедуры

#КонецОбласти

#Область РаботаССервисом

Функция ОтправитьНачислениеБонусов(НастройкиИнтеграции, ДанныеЗапроса)
	
	СоединениеHTTP = УстановитьСоединение(НастройкиИнтеграции.АдресСервиса);
	
	Если СоединениеHTTP = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПутьНаСервере = "/v4/bonuses";
	Заголовки = ПолучитьЗаголовкиСоединения(НастройкиИнтеграции.КлючAPI);

	HTTPЗапрос = Новый HTTPЗапрос(ПутьНаСервере, Заголовки);
	
	Если ДанныеЗапроса <> Неопределено Тогда
		
		HTTPЗапрос.УстановитьТелоИзСтроки(
			ФормированиеДанныхЗапроса(ДанныеЗапроса), 
			КодировкаТекста.UTF8,
			ИспользованиеByteOrderMark.НеИспользовать);	
			
	КонецЕсли;
	
	HTTPОтвет = СоединениеHTTP.ОтправитьДляОбработки(HTTPЗапрос);
	                                                                            
	ДанныеОтвета = Новый Структура("Ошибка, ОписаниеОшибки, Данные", Ложь, "", Неопределено);
	Если HTTPОтвет.КодСостояния = 200 Тогда
		
		Ответ = ПолучитьДанныеЗапроса(HTTPОтвет);
		
		Если Ответ.Свойство("status") И Ответ.status = "error" Тогда
			
			ДанныеОтвета.Ошибка = Истина;
			
			Для Каждого СтрокаОшибка Из Ответ.events Цикл 
				
				Если СтрДлина(ДанныеОтвета.ОписаниеОшибки) > 0 Тогда 
					ДанныеОтвета.ОписаниеОшибки = ДанныеОтвета.ОписаниеОшибки + Символы.ПС;		
				КонецЕсли;
				
				ДанныеОтвета.ОписаниеОшибки = ДанныеОтвета.ОписаниеОшибки + СтрокаОшибка.text;   
				
			КонецЦикла; 
			
		Иначе
			
			ДанныеОтвета.Данные = Ответ;	
			
		КонецЕсли;
		
	Иначе
			
		ДанныеОтвета.Ошибка = Истина;
		ДанныеОтвета.ОписаниеОшибки = "Ошибка начисления бонусных баллов -> код ошибки: " + Формат(HTTPОтвет.КодСостояния, "ЧГ=0")
			+ Символы.ПС
			+ "Описание: " + HTTPОтвет.ПолучитьТелоКакСтроку();
			
			
	КонецЕсли;
	
	Возврат ДанныеОтвета;
	
КонецФункции

Функция ИзменитьНачислениеБонусов(НастройкиИнтеграции, ДанныеЗапроса, Идентификатор)
	
	СоединениеHTTP = УстановитьСоединение(НастройкиИнтеграции.АдресСервиса);
	
	Если СоединениеHTTP = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	HTTPЗапрос = Новый HTTPЗапрос(
		"/v4/bonuses/" + Идентификатор,
		ПолучитьЗаголовкиСоединения(НастройкиИнтеграции.КлючAPI)
	);
	
	Если ДанныеЗапроса <> Неопределено Тогда
		
		HTTPЗапрос.УстановитьТелоИзСтроки(
			ФормированиеДанныхЗапроса(ДанныеЗапроса), 
			КодировкаТекста.UTF8,
			ИспользованиеByteOrderMark.НеИспользовать);	
			
	КонецЕсли;
		
	HTTPОтвет = СоединениеHTTP.ОтправитьДляОбработки(HTTPЗапрос);
	
	ДанныеОтвета = Новый Структура("Ошибка, ОписаниеОшибки, Данные", Ложь, "", Неопределено);
	Если HTTPОтвет.КодСостояния = 200 Тогда
		
		Ответ = ПолучитьДанныеЗапроса(HTTPОтвет);
		
		Если Ответ.Свойство("status") И Ответ.status = "error" Тогда
			
			ДанныеОтвета.Ошибка = Истина;
			
			Для Каждого СтрокаОшибка Из Ответ.events Цикл 
				
				Если СтрДлина(ДанныеОтвета.ОписаниеОшибки) > 0 Тогда 
					ДанныеОтвета.ОписаниеОшибки = ДанныеОтвета.ОписаниеОшибки + Символы.ПС;		
				КонецЕсли;
				
				ДанныеОтвета.ОписаниеОшибки = ДанныеОтвета.ОписаниеОшибки + СтрокаОшибка.text;   
				
			КонецЦикла; 
			
		Иначе
			
			ДанныеОтвета.Данные = Ответ;	
			
		КонецЕсли;
		
	Иначе
		
		ДанныеОтвета.Ошибка = Истина;
		ДанныеОтвета.ОписаниеОшибки = "Ошибка изменения бонусных баллов -> код ошибки: " + Формат(HTTPОтвет.КодСостояния, "ЧГ=0")
			+ Символы.ПС
			+ "Описание: " + HTTPОтвет.ПолучитьТелоКакСтроку();
			
			
	КонецЕсли;
	
	Возврат ДанныеОтвета;
				
КонецФункции

Функция ВыполнитьУдалениеБонусов(НастройкиИнтеграции, ДанныеЗапроса, Идентификатор)

	СоединениеHTTP = УстановитьСоединение(НастройкиИнтеграции.АдресСервиса);
	
	Если СоединениеHTTP = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПутьНаСервере = "/v4/bonuses/" + СокрЛП(Идентификатор);
	Заголовки = ПолучитьЗаголовкиСоединения(НастройкиИнтеграции.КлючAPI);

	HTTPЗапрос = Новый HTTPЗапрос(ПутьНаСервере, Заголовки);
			
	HTTPОтвет = СоединениеHTTP.Удалить(HTTPЗапрос);
	
	ДанныеОтвета = Новый Структура("Ошибка, ОписаниеОшибки, Данные", Ложь, "", Неопределено);
	Если HTTPОтвет.КодСостояния = 200 Тогда
		
		Ответ = ПолучитьДанныеЗапроса(HTTPОтвет);
		
		Если Ответ.Свойство("status") И Ответ.status = "error" Тогда
			
			ДанныеОтвета.Ошибка = Истина;
			
			Для Каждого СтрокаОшибка Из Ответ.events Цикл 
				
				Если СтрДлина(ДанныеОтвета.ОписаниеОшибки) > 0 Тогда 
					ДанныеОтвета.ОписаниеОшибки = ДанныеОтвета.ОписаниеОшибки + Символы.ПС;		
				КонецЕсли;
				
				ДанныеОтвета.ОписаниеОшибки = ДанныеОтвета.ОписаниеОшибки + СтрокаОшибка.text;   
				
			КонецЦикла; 
			
		Иначе
			
			ДанныеОтвета.Данные = Ответ.data;	
			
		КонецЕсли;
		
	Иначе
		
		ДанныеОтвета.Ошибка = Истина;
		ДанныеОтвета.ОписаниеОшибки = "Ошибка удаления бонусных баллов -> код ошибки: " + Формат(HTTPОтвет.КодСостояния, "ЧГ=0")
			+ Символы.ПС
			+ "Описание: " + HTTPОтвет.ПолучитьТелоКакСтроку();
			
			
	КонецЕсли;
	
	Возврат ДанныеОтвета;

КонецФункции

/////////////////////////////////////////////////////////////////

Функция ОтправитьПродажу(НастройкиИнтеграции, ДанныеЗапроса)
	
	СоединениеHTTP = УстановитьСоединение(НастройкиИнтеграции.АдресСервиса);
	
	Если СоединениеHTTP = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	HTTPЗапрос = Новый HTTPЗапрос(
		"/v4/transactions",
		ПолучитьЗаголовкиСоединения(НастройкиИнтеграции.КлючAPI)
	);
	
	Если ДанныеЗапроса <> Неопределено Тогда
		
		HTTPЗапрос.УстановитьТелоИзСтроки(
			ФормированиеДанныхЗапроса(ДанныеЗапроса), 
			КодировкаТекста.UTF8,
			ИспользованиеByteOrderMark.НеИспользовать);	
			
	КонецЕсли;
		
	HTTPОтвет = СоединениеHTTP.ОтправитьДляОбработки(HTTPЗапрос);
	
	ДанныеОтвета = Новый Структура("Ошибка, ОписаниеОшибки, Данные", Ложь, "", Неопределено);
	Если HTTPОтвет.КодСостояния = 200 Тогда
		
		Ответ = ПолучитьДанныеЗапроса(HTTPОтвет);
		
		Если Ответ.Свойство("status") И Ответ.status = "error" Тогда
			
			ДанныеОтвета.Ошибка = Истина;
			
			Для Каждого СтрокаОшибка Из Ответ.events Цикл 
				
				Если СтрДлина(ДанныеОтвета.ОписаниеОшибки) > 0 Тогда 
					ДанныеОтвета.ОписаниеОшибки = ДанныеОтвета.ОписаниеОшибки + Символы.ПС;		
				КонецЕсли;
				
				ДанныеОтвета.ОписаниеОшибки = ДанныеОтвета.ОписаниеОшибки + СтрокаОшибка.text;   
				
			КонецЦикла; 
			
		Иначе
			
			ДанныеОтвета.Данные = Ответ;	
			
		КонецЕсли;
		
	Иначе
		
		ДанныеОтвета.Ошибка = Истина;
		ДанныеОтвета.ОписаниеОшибки = "Ошибка отправки продаж -> код ошибки: " + Формат(HTTPОтвет.КодСостояния, "ЧГ=0")
			+ Символы.ПС
			+ "Описание: " + HTTPОтвет.ПолучитьТелоКакСтроку();
			
			
	КонецЕсли;
	
	Возврат ДанныеОтвета;
	
КонецФункции

Функция УдалитьПродажу(НастройкиИнтеграции, ДанныеЗапроса, Идентификатор)

	СоединениеHTTP = УстановитьСоединение(НастройкиИнтеграции.АдресСервиса);
	
	Если СоединениеHTTP = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстПараметры = "";
	Если ДанныеЗапроса <> Неопределено Тогда
		
		Для Каждого СтрокаПараметр Из ДанныеЗапроса Цикл
			
			Если СтрДлина(ТекстПараметры) = 0 Тогда
				
				ТекстПараметры = ТекстПараметры + "?";
				
			Иначе
				
				ТекстПараметры = ТекстПараметры + "&";
				
			КонецЕсли;
			
			ТекстПараметры = ТекстПараметры + СтрокаПараметр.Ключ + "=" + Строка(СтрокаПараметр.Значение);
			
		КонецЦикла;
		
	КонецЕсли;

	HTTPЗапрос = Новый HTTPЗапрос(
		"/v4/transactions" + ТекстПараметры,
		ПолучитьЗаголовкиСоединения(НастройкиИнтеграции.КлючAPI)
	);
			
	HTTPОтвет = СоединениеHTTP.Удалить(HTTPЗапрос);

	ДанныеОтвета = Новый Структура("Ошибка, ОписаниеОшибки, Данные", Ложь, "", Неопределено);
	Если HTTPОтвет.КодСостояния = 200 Тогда
		
		Ответ = ПолучитьДанныеЗапроса(HTTPОтвет);
		
		Если Ответ.Свойство("status") И Ответ.status = "error" Тогда
			
			ДанныеОтвета.Ошибка = Истина;
			
			Для Каждого СтрокаОшибка Из Ответ.events Цикл 
				
				Если СтрДлина(ДанныеОтвета.ОписаниеОшибки) > 0 Тогда 
					ДанныеОтвета.ОписаниеОшибки = ДанныеОтвета.ОписаниеОшибки + Символы.ПС;		
				КонецЕсли;
				
				ДанныеОтвета.ОписаниеОшибки = ДанныеОтвета.ОписаниеОшибки + СтрокаОшибка.text;   
				
			КонецЦикла; 
			
		Иначе
			
			ДанныеОтвета.Данные = Ответ;	
			
		КонецЕсли;
		
	Иначе	
			
		ДанныеОтвета.Ошибка = Истина;
		ДанныеОтвета.ОписаниеОшибки = "Ошибка удаления продаж -> код ошибки: " + Формат(HTTPОтвет.КодСостояния, "ЧГ=0")
			+ Символы.ПС
			+ "Описание: " + HTTPОтвет.ПолучитьТелоКакСтроку();
			
			
	КонецЕсли;
	
	Возврат ДанныеОтвета;

КонецФункции

/////////////////////////////////////////////////////////////////

Функция УстановитьСоединение(АдресAPI)
	
	Перем Результат;
	
	Попытка
		
		Если СтрНайти(АдресAPI, "https") Тогда
			
			HTTPS_Соединение = Новый ЗащищенноеСоединениеOpenSSL;
		
			Порт = 443;
				
			Адрес = СтрЗаменить(АдресAPI, "https://", "");       
				
			Результат = Новый HTTPСоединение(
				Адрес, 
				Порт,,,,
				60,
				HTTPS_Соединение);

							
		Иначе           
				                     
			
			Порт = 80;

			Адрес = СтрЗаменить(АдресAPI, "http://", "");	
			
			Разделитель = СтрНайти(Адрес, ":");
			
			Если Разделитель > 0 Тогда
				 
				Порт = Сред(Адрес, Разделитель + 1, СтрДлина(АдресAPI));
				Порт = СтрЗаменить(Порт, "\", "");
				Порт = СтрЗаменить(Порт, "/", "");
				Порт = Число(Порт);   
				Адрес = Лев(Адрес, Разделитель - 1);
				
			КонецЕсли;     
			
			Результат = Новый HTTPСоединение(
				Адрес, 
				Порт);
				
			

		КонецЕсли;		
	Исключение
		
		ЗаписьЖурналаРегистрации(
			"Установка соединение с сервисом LegendCity",
			УровеньЖурналаРегистрации.Информация,
			Метаданные.Подсистемы.пд_ИнтеграцияLegendCity.Имя,,
			"Не удалось установить соединение с сервером. Проверьте настройки авторизации."
			);
			
		Результат = Неопределено;
		
	Конецпопытки;	
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьЗаголовкиСоединения(КлючAPI)
	
	ЗаголовкиHTTP = Новый Соответствие;
	ЗаголовкиHTTP.Вставить("x-api-key", СокрЛП(КлючAPI));
	ЗаголовкиHTTP.Вставить("Content-Type", "application/json; charset=utf-8");
	
	Возврат ЗаголовкиHTTP;
	
КонецФункции	

Функция ПолучитьДанныеЗапроса(ДанныеОтвета)
	
	ЧтениеJSON = Новый ЧтениеJSON;
	
	ЧтениеJSON.УстановитьСтроку(
		ДанныеОтвета.ПолучитьТелоКакСтроку()
	);
	
	Попытка
		
		ДанныеЗапроса = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		
		Возврат ДанныеЗапроса;
		
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции	

Функция ФормированиеДанныхЗапроса(ДанныеЗапроса)
	
	ЗапросJSON = Новый ЗаписьJSON;
	
	ЗапросJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗапросJSON, ДанныеЗапроса);
	
	Возврат ЗапросJSON.Закрыть();
		
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьИдентификатор()
	
	Идентификатор = Формат(ТекущаяДата(), "ДФ=ddMMyyyyHHmmss"); 
	
	ГСЧ = Новый ГенераторСлучайныхЧисел;
	ГСЧ.СлучайноеЧисло(1, 4294967295);      
	
	Возврат Число(Идентификатор) + ГСЧ.СлучайноеЧисло(1, 4294967295);
	
КонецФункции

Функция ПолучитьСуммуПродажиСкидкиПродажиПоБонуснойКарте(Документ, БонуснаяКарта)
	
	Данные = Новый Структура("СуммаПродажиБезСкидки, СуммаПродажи, СуммаСкидки, Бонус", 0, 0, 0, 0);
	
	Данные.Бонус = ПолучитьБонус(Документ, БонуснаяКарта, "Расход");

	ЗапросПродажи = Новый Запрос;
	ЗапросПродажи.Текст = 
	
	"ВЫБРАТЬ
	|	СУММА(ЕСТЬNULL(ПродажиПоДисконтнымКартам.СтоимостьОборот, 0)) КАК Стоимость,
	|	СУММА(ЕСТЬNULL(ПродажиПоДисконтнымКартам.СтоимостьБезСкидокОборот, 0)) КАК СтоимостьБезСкидок
	|ИЗ
	|	РегистрНакопления.Продажи.Обороты(, , , ДокументПродажи = &ДокументПродажи) КАК ПродажиПоДисконтнымКартам";
	
	ЗапросПродажи.УстановитьПараметр("ДокументПродажи", Документ);
	
	ВыборкаПродажа = ЗапросПродажи.Выполнить().Выбрать();
	Если ВыборкаПродажа.Следующий() Тогда 
		
		Данные.СуммаПродажи = ВыборкаПродажа.Стоимость;
		Данные.СуммаСкидки = ВыборкаПродажа.СтоимостьБезСкидок - (ВыборкаПродажа.Стоимость + Данные.Бонус);
		Данные.СуммаПродажиБезСкидки = ВыборкаПродажа.СтоимостьБезСкидок; 
		
		Если Данные.СуммаСкидки < 0 Тогда
			Данные.СуммаСкидки = 0;
		КонецЕсли;
		
	КонецЕсли;   
	
	Возврат Данные;
	
КонецФункции

Функция ПолучитьБонус(Документ, ДисконтнаяКарта, ВидДвижения)
	
	ЗапросБонус = Новый Запрос;
	ЗапросБонус.Текст = 
	
	"ВЫБРАТЬ
	|	ЕстьNull(БонусныеБаллы.Начислено" + ВидДвижения + ", 0) КАК Бонус
	|ИЗ
	|	РегистрНакопления.БонусныеБаллы.Обороты(, , Регистратор, ДисконтнаяКарта = &ДисконтнаяКарта) КАК БонусныеБаллы
	|ГДЕ
	|	БонусныеБаллы.Регистратор = &Документ
	|	И БонусныеБаллы.Начислено" + ВидДвижения + " <> 0";
	
	ЗапросБонус.УстановитьПараметр("Документ", Документ);
	ЗапросБонус.УстановитьПараметр("ДисконтнаяКарта", ДисконтнаяКарта);
	
	Результат = ЗапросБонус.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат 0;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Бонус;
	
КонецФункции

Функция ПолучитьНастройкиИнтеграции() Экспорт
	
	 НастройкиИнтеграции = ХранилищеОбщихНастроек.Загрузить(
		Метаданные.Подсистемы.пд_ИнтеграцияLegendCity.Имя,
		"НастройкиИнтеграции",,
		"1С");
		
НастройкиИнтеграции.КлючAPI = НастройкиИнтеграции.ТаблицаКлючAPI.Найти(ПараметрыСеанса.ТекущийМагазин).Ключ;
		
Возврат НастройкиИнтеграции;

КонецФункции

#КонецОбласти