
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьНастройкиИнтеграции();

	УстановитьРасписаниеРегламентногоЗаданияПриЧтенииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьНадписьРасписанияОбмена();
	
	ОбновитьВидимостьДоступностьЭлементовФормы();
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура СохранитьНастройки(Команда)
	
	СохранитьНастройкиИнтеграции();
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокКВыгрузке(Команда)

	ОткрытьФорму("РегистрСведений.пд_БонусныеНачисленияИПродажиКВыгрузке.ФормаСписка",
		Неопределено,
		ЭтаФорма,
		УникальныйИдентификатор);
	
КонецПроцедуры

#Область ОбработкаСобытийЭлементовФормы

&НаКлиенте
Процедура ИспользоватьРегламентноеЗаданиеПриИзменении(Элемент)
	
	ПриИзмененииИспользоватьРегламентныеЗадания();
	
КонецПроцедуры

&НаКлиенте
Процедура РасписаниеРегламентногоЗадания(Команда)
	
	ВыполнитьНастройкуРасписанияОбмена();
	УстановитьНадписьРасписанияОбмена();
	
КонецПроцедуры

&НаКлиенте
Процедура ТестСоединения(Команда)
	
	ДанныеОтвета = ТестСоединенияНаСервере();
	
	Сообщение = Новый СообщениеПользователю;
	
	Если ДанныеОтвета = Неопределено Тогда
		
		Элементы.ТестКлюча.Картинка = БиблиотекаКартинок.ОформлениеКругКрасный;	
		Сообщение.Текст = "Не удалось установить соединение из 1С, проверьте снят ли безопасный режим у расширения.";	
		
	ИначеЕсли ДанныеОтвета.Ошибка = Истина Тогда
		
		Элементы.ТестСоединения.Картинка = БиблиотекаКартинок.ОформлениеКругКрасный;
		Сообщение.Текст = "Неуспешноe соединение с сервером"
		+ Символы.ПС
		+ "Описание: " + ДанныеОтвета.ОписаниеОшибки;
		
	Иначе
		
		Элементы.ТестСоединения.Картинка = БиблиотекаКартинок.ОформлениеКругЗеленый;
		Сообщение.Текст = "Успешноe соединение с сервером";
		
	КонецЕсли;
	
	Сообщение.Сообщить();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТестСоединенияНаСервере()
		
	Возврат пд_ОбменСLegendCity.ТестСоединения();
	
КонецФункции

&НаКлиенте
Процедура ТестКлюча(Команда)
	
	ДанныеОтвета = ТестКлючаНаСервере();
	Сообщение = Новый СообщениеПользователю;
	Если ДанныеОтвета = Неопределено Тогда
		
		Элементы.ТестКлюча.Картинка = БиблиотекаКартинок.ОформлениеКругКрасный;			
		Сообщение.Текст = "Не удалось установить соединение из 1С, проверьте снят ли безопасный режим у расширения.";
		
	ИначеЕсли ДанныеОтвета.Ошибка = Истина Тогда
		
		Элементы.ТестКлюча.Картинка = БиблиотекаКартинок.ОформлениеКругКрасный;		
		Сообщение.Текст = "Неверный Ключ АПИ"
		+ Символы.ПС
		+ "Описание: " + ДанныеОтвета.ОписаниеОшибки;
		
	Иначе
		
		Элементы.ТестКлюча.Картинка = БиблиотекаКартинок.ОформлениеКругЗеленый;		
		Сообщение.Текст = "Верный Ключ АПИ";
		
	КонецЕсли;
	
	Сообщение.Сообщить();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТестКлючаНаСервере()
	
	Возврат пд_ОбменСLegendCity.ТестКлюча();
	
КонецФункции 

&НаКлиенте
Процедура Информация(Команда)
	
	
	ДанныеОтвета = ИнформацияНаСервере(Формат(Элементы.ТаблицаИдентификаторТерминала.ТекущиеДанные.ИдентификаторТерминала,"ЧГ=0"));
	
	Сообщение = Новый СообщениеПользователю;
	
	Если ДанныеОтвета = Неопределено Тогда
		
		Сообщение.Текст = "Не удалось установить соединение из 1С, проверьте снят ли безопасный режим у расширения.";
		Сообщение.Сообщить();
	ИначеЕсли ДанныеОтвета.Ошибка = Истина Тогда
			
		Сообщение.Текст = "Ошибка при получении информации"
		+ Символы.ПС
		+ "Описание: " + ДанныеОтвета.ОписаниеОшибки;
		Сообщение.Сообщить();
		
	Иначе
		
		ПоказатьПредупреждение(,ДанныеОтвета.Данные,10,"Конфигурация");	
		
	КонецЕсли;
	


КонецПроцедуры

&НаСервереБезКонтекста
Функция ИнформацияНаСервере(ИдентификаторТерминала)
	Возврат пд_ОбменСLegendCity.Информация(ИдентификаторТерминала);
Конецфункции


#КонецОбласти

#Область ПроцедурыИФункцииПоРаботеСРегламентнымиЗаданиями

&НаСервере
Процедура УстановитьРасписаниеРегламентногоЗаданияПриЧтенииНаСервере()
	
	Если ЗначениеЗаполнено(ИдентификаторРегламентногоЗадания) Тогда
		
		Задание = ПолучитьРегламентноеЗадание(ИдентификаторРегламентногоЗадания);
		
		Если НЕ Задание = НеОпределено Тогда
			РасписаниеРегламентногоЗадания = Задание.Расписание;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииИспользоватьРегламентныеЗадания()
	
	ОбновитьВидимостьДоступностьЭлементовФормы();
	
	Если ИспользоватьРегламентноеЗадание Тогда
		ВыполнитьНастройкуРасписанияОбмена();
		УстановитьНадписьРасписанияОбмена();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьНадписьРасписанияОбмена()
	
	ПроверитьЗаполнитьРасписаниеЗадания();
	
	Если РасписаниеРегламентногоЗадания = НеОпределено Тогда
		ТекстЗаголовка = НСтр("ru='Настроить расписание обмена'");
	Иначе
		ТекстЗаголовка = РасписаниеРегламентногоЗадания;
	КонецЕсли;
	
	Элементы.РасписаниеРегламентогоЗадания.Заголовок = ТекстЗаголовка;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнитьРасписаниеЗадания() 
	
	Задание = ПолучитьРегламентноеЗадание(ИдентификаторРегламентногоЗадания);
	
	Если Не Задание = НеОпределено Тогда
		РасписаниеРегламентногоЗадания = Задание.Расписание;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьНастройкуРасписанияОбмена()
	
	Если РасписаниеРегламентногоЗадания = Неопределено Тогда
		РасписаниеРегламентногоЗадания = Новый РасписаниеРегламентногоЗадания;
	КонецЕсли;
	
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(РасписаниеРегламентногоЗадания);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершитьИзменятьРасписание", 
		ЭтотОбъект);
	
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьИзменятьРасписание(РасписаниеЗадания, ДополнительныеПараметры) Экспорт
	
	Если РасписаниеЗадания = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РасписаниеРегламентногоЗадания = РасписаниеЗадания;
	
	УстановитьНадписьРасписанияОбмена();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьРегламентноеЗадание(Идентификатор)
	
	Задание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(Идентификатор);
	Возврат Задание;
	
КонецФункции

&НаСервере
Процедура УдалитьРегламентноеЗадание(Идентификатор)
	
	Задание = ПолучитьРегламентноеЗадание(Идентификатор);
	Если НЕ Задание = НеОпределено Тогда
		РегламентныеЗаданияСервер.УдалитьЗадание(Задание);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НовоеЗадание(ПараметрыЗадания)
	
	РегламентноеЗадание = РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
	
	Если ТипЗнч(РегламентноеЗадание) = Тип("СтрокаТаблицыЗначений") Тогда
		Идентификатор = РегламентноеЗадание.Ключ;
	Иначе
		Идентификатор = РегламентноеЗадание.УникальныйИдентификатор;
	КонецЕсли;
	
	Возврат Идентификатор;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбновитьВидимостьДоступностьЭлементовФормы()
	
	Элементы.РасписаниеРегламентогоЗадания.Доступность = ИспользоватьРегламентноеЗадание;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНастройкиИнтеграции()
	
	НастройкиИнтеграции = пд_ОбменСLegendCity.ПолучитьНастройкиИнтеграции();
	Если НастройкиИнтеграции = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭтаФорма.ТаблицаИдентификаторТерминала.Загрузить(НастройкиИнтеграции.ТаблицаИдентификаторТерминала);
	НастройкиИнтеграции.Удалить("ТаблицаИдентификаторТерминала");
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма, НастройкиИнтеграции);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиИнтеграции()
	
	Если ИспользоватьРегламентноеЗадание Тогда
				
		Задание = ПолучитьРегламентноеЗадание(ИдентификаторРегламентногоЗадания);
		Если Задание = НеОпределено Тогда
			
			МассивПараметров = Новый Массив;
			МассивПараметров.Добавить(Метаданные.Подсистемы.пд_ИнтеграцияLegendCity.Имя);
			МассивПараметров.Добавить("LegendCity_ВыгрузитьИзмененияБонусов");
						
			ПараметрыЗадания = Новый Структура;
			ПараметрыЗадания.Вставить("Расписание", РасписаниеРегламентногоЗадания);
			ПараметрыЗадания.Вставить("ИмяМетода", Метаданные.РегламентныеЗадания.ЗапускДополнительныхОбработок.ИмяМетода);
			ПараметрыЗадания.Вставить("Параметры", МассивПараметров);
			ПараметрыЗадания.Вставить("Наименование", "Выгрузка бонусных баллов (" + АдресСервиса + ")");
			ПараметрыЗадания.Вставить("Метаданные", Метаданные.РегламентныеЗадания.ЗапускДополнительныхОбработок);
			ПараметрыЗадания.Вставить("Ключ", Строка(Новый УникальныйИдентификатор));
			ПараметрыЗадания.Вставить("Использование", Истина);
			
			ИдентификаторРегламентногоЗадания = НовоеЗадание(ПараметрыЗадания);
			
		КонецЕсли;
				
	ИначеЕсли ЗначениеЗаполнено(ИдентификаторРегламентногоЗадания) Тогда
		УдалитьРегламентноеЗадание(ИдентификаторРегламентногоЗадания);	
	КонецЕсли;

	НастройкиИнтеграции = Новый Структура;
	
	Для Каждого РеквизитФормы Из ЭтаФорма.ПолучитьРеквизиты() Цикл
		
		Если Не РеквизитФормы.СохраняемыеДанные Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ЭтаФорма[РеквизитФормы.Имя])=Тип("ДанныеФормыКоллекция") Тогда
			НастройкиИнтеграции.Вставить(РеквизитФормы.Имя, ЭтаФорма[РеквизитФормы.Имя].Выгрузить());	
		иначе	
			НастройкиИнтеграции.Вставить(РеквизитФормы.Имя, ЭтаФорма[РеквизитФормы.Имя]);
		КонецЕсли;
		
	КонецЦикла;
	
	ХранилищеОбщихНастроек.Сохранить(Метаданные.Подсистемы.пд_ИнтеграцияLegendCity.Имя,
		"НастройкиИнтеграции", 
		НастройкиИнтеграции,,
		"1С");
		
	Модифицированность = Ложь;
		
КонецПроцедуры

#КонецОбласти

